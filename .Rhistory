skip()
skip()
skip()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydef")
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
skip()
submit()
submit()
tbl()
pack_sum
quantile(pack_sum$count, probs = 0.99)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
?desc
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
?mutate
submit()
/
submit()
submit()
reset()
swirl()
submit()
submit()
submit()
submit()
source('/tmp/Rtmp2la9DO/chain3.R')
submit()
submit()
submit()
submit()
?arrange
submit()
?desc
submit()
submit()
skip()
head(cars)
plot(speed, distance)
plot(cars, speed, distance)
plot(cars, speed)
plot(cars, c(speed, distance))
skip()
with(cars, plot(speed,dist))
text(mean(cars$speed))
text(mean(cars$speed), max(caes$dist))
text(mean(cars$speed), max(cars$dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table
table(state$region)
skip()
skip()
head(mpg)
dim(mpg)
table(mpg$model)
skip()
qplot(displ, hwy, data = mpg, geom = c(point,smooth), facets = ~drv)
qplot(displ, hwy, data = mpg, geom = c("point",smooth), facets = ~drv)
qplot(displ, hwy, data = mpg, geom = c("point","smooth"), facets = ~drv)
qplot(displ, hwy, data = mpg, geom = c("point","smooth"), facets =.~drv)
ggplot(mpg,displ, hey )
ggplot(mpg,displ, hwy )
ggplot(mpg, c(displ, hwy) )
ggplot(mpg, c("displ", "hwy") )
ggplot(mpg, aes("displ", "hwy") )
ggplot(mpg, aes(displ, hwy)) -> g
?aes
summary(g)
?geom
?geom_boxplot
g+geom_boxplot()
g+geom_point()
geom_smooth(g+geom_point())
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth("lm")
g+geom_point()+geom_smooth(set = "lm")
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+facet_grid()
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)
skip()
skip()
g+geom_point(color="pink",size=4,alpha=1/2)
?drv
??drv
g+geom_point(aes(color=drv),size=4,alpha=1/2)
skip()
skip()
skip()
skip()
skip()
g <- ggplot(testdat, aes(x = myx, y = myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim = c(-3,3)
)
skip()
g
g+geom_point()
skip()
skip()
skip()
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, key = sex_class, value = column)
gather(students2, sex_class, count, -grade) -> res
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class") )
?chain
??chain
submit()
skip()
students3
skip()
?spread
skip()
library(readr)
parse_number("class5")
submit()
skip()
students4
submit()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv', 'ACS.csv')
ACD <- read.csv('ACS.csv')
ACS <- read.csv('ACS.csv')
agricultureLogical <- ACS$ACR == 3, ACS$AGS == 6
agricultureLogical <- ACS$ACR == 3 & ACS$AGS == 6
head(which(agricultureLogical), 3)
install.packages('jpeg')
library(jpeg)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg', jeff.jpg)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg', 'jeff.jpg')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg', 'jeff.jpg', mode = 'wb')
picture <- readJPEG('jeff.jpg', native = TRUE)
quantile(picture, probs = c(0.3. 0.8))
quantile(picture, probs = c(0.3, 0.8))
install.packages('data.table')
GDP <-  fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv')
library(data.table)
GDP <-  fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv')
FEDSTATS_Country <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
)
mergedDT <- merge(FGDP, FEDSTATS_Country, by = 'CountryCode')
mergedDT <- merge(GDP, FEDSTATS_Country, by = 'CountryCode')
FGDP <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, skip=4
, nrows = 190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Economy", "Total")
)
mergedDT <- merge(FGDP, FEDSTATS_Country, by = 'CountryCode')
nrow(mergedDT)
FGDP <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, skip=4
, nrows = 190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Economy", "Total")
)
FEDSTATS_Country <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
)
mergedDT <- merge(FGDP, FEDSTATS_Country, by = 'CountryCode')
nrow(mergedDT)
mergedDT[order(-Rank)][13,.(Economy)]
library('dplyr')
breaks <- quantile(mergedDT[, Rank], probs = seq(0, 1, 0.2), na.rm = TRUE)
mergedDT$quantileGDP <- cut(mergedDT[, Rank], breaks = breaks)
mergedDT[`Income Group` == "Lower middle income", .N, by = c("Income Group", "quantileGDP")]
library(swirl)
swirl()
swirl()
library(swirl)
swirl()
install.packages('fields')
swirl()
install.packages("fields")
library(swirl)
swirl()
install.packages(c("cli", "covr", "crosstalk", "digest", "dplyr", "fs", "ggplot2", "glue", "lifecycle", "plyr", "rlang", "roxygen2", "shiny", "testthat", "vctrs", "xml2"))
install.packages(c("cli", "covr", "crosstalk", "digest", "dplyr", "fs", "ggplot2", "glue", "lifecycle", "plyr", "rlang", "roxygen2", "shiny", "testthat", "vctrs", "xml2"))
install.packages(c("cli", "covr", "crosstalk", "digest", "dplyr", "fs", "ggplot2", "glue", "lifecycle", "plyr", "rlang", "roxygen2", "shiny", "testthat", "vctrs", "xml2"))
install.packages(c("cli", "covr", "crosstalk", "digest", "dplyr", "fs", "ggplot2", "glue", "lifecycle", "plyr", "rlang", "roxygen2", "shiny", "testthat", "vctrs", "xml2"))
install.packages(c("cli", "covr", "crosstalk", "digest", "dplyr", "fs", "ggplot2", "glue", "lifecycle", "plyr", "rlang", "roxygen2", "shiny", "testthat", "vctrs", "xml2"))
install.packages(c("cli", "covr", "crosstalk", "digest", "dplyr", "fs", "ggplot2", "glue", "lifecycle", "plyr", "rlang", "roxygen2", "shiny", "testthat", "vctrs", "xml2"))
install.packages(c("cli", "covr", "crosstalk", "digest", "dplyr", "fs", "ggplot2", "glue", "lifecycle", "plyr", "rlang", "roxygen2", "shiny", "testthat", "vctrs", "xml2"))
install.packages(c("cli", "covr", "crosstalk", "digest", "dplyr", "fs", "ggplot2", "glue", "lifecycle", "plyr", "rlang", "roxygen2", "shiny", "testthat", "vctrs", "xml2"))
swirl()
library(swirl)
swirl()
install.packages("fields")
swirl()
library(swirl)
swirl()
Sys.getlocale()
Sys.getlocale("LC_TIME
")
Sys.getlocale("LC_TIME")
library(lubridate)
?lubridate
help(package = "lubridate")
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
skip()
skip()
skip()
skip()
skip()
skip()
ymd("1987 May 17")
ymd("1989 May 17")
skip()
skip()
ymd("192012")
skip()
dt1
ymd_hms(dt1)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
nyc
nyc
nyc + days(2)
nyc + days(2)
skip()
depart
skip()
depart
skip()
?with_tz
skip()
arrive
skip()
skip()
skip()
skip()
skip()
skip()
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv', ACS.csv, method = 'curl')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv', ACS.csv, method = 'curl')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv', 'ACS.csv', method = 'curl')
data <- read.csv(ACS.csv)
data <- read.csv('ACS.csv')
strsplit(names(data), "\\wgtp")[123]
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv', 'GDP.csv')
data <- read.csv('GDP.csv')
gdpData <- gdpData[, c(1, 2, 4, 5)]
data <- data[, c(1, 2, 4, 5)]
colnames(data) <- c("CountryCode", "Rank", "Country.Name", "GDP.Value")
mean(as.numeric(gsub(",", "", gdpData$GDP.Value)))
mean(as.numeric(gsub(",", "", data$GDP.Value)))
mean(as.numeric(gsub(",", "", data$GDP.Value)))
history()
setwd('/home/vwalia/RepData_PeerAssessment1/')
data <- unzip(activity.zip)
data <- unzip('activity.zip')
unzip('activity.zip')
unzip('activity.zip')
?ddply
??ddply
library(plyr)
?ddply
plot(totalSteps$date, totalSteps$steps)
install.packages("timeDate")
unzip('activity.zip')
data <- read.csv(file = 'activity.csv', header = TRUE, colClasses = c('numeric', 'date', 'numeric'))
data <- read.csv(file = 'activity.csv', header = TRUE, colClasses = c('numeric', 'Date', 'numeric'))
data$weekday <- weekdays(data$date)
data_NA <- data
data_noNA <- data[complete.cases(data),]
totalSteps <- ddply(data.NoNA, .(date), summarise, steps = sum(steps))
totalSteps <- ddply(data_noNA, .(date), summarise, steps = sum(steps))
plot(totalSteps$date, totalSteps$steps)
source('~/RepData_PeerAssessment1/project1.R')
source('~/RepData_PeerAssessment1/project1.R')
abline(h = mean(sum.steps.day$steps), col = "red", lwd = 2)
plot(totalSteps$date, totalSteps$steps, )
abline(h = mean(sum.steps.day$steps), col = "red", lwd = 2)
data$weekday <- weekdays(data$date)
data_NA <- data
data_noNA <- data[complete.cases(data),]
totalSteps <- ddply(data_noNA, .(date), summarise, steps = sum(steps))
plot(totalSteps$date, totalSteps$steps, type = "h", main = "Histogram of daily steps", xlab = "Date", ylab = "Steps per day", col = "blue", lwd = 8)
abline(h = mean(sum.steps.day$steps), col = "red", lwd = 2)
abline(h = mean(totalSteps$steps), col = "red", lwd = 2)
plot(totalSteps$date, totalSteps$steps, type = "h", main = "Daily Steps", xlab = "Date", ylab = "Steps per day", col = "blue")
plot(totalSteps$date, totalSteps$steps, type = "h", main = "Daily Steps", xlab = "Date", ylab = "Steps per day", col = "blue", lwd = 4)
ggplot(data_steps, aes(x = interval, y = steps)) +
geom_line(col='blue') +
ylab('Number of steps') + xlab("Interval") +
ggtitle("Number of Steps per Interval (weekend/weekend") +
facet_grid(daytype ~ .)
ggplot('data_steps', aes(x = interval, y = steps)) +
geom_line(col='blue') +
ylab('Number of steps') + xlab("Interval") +
ggtitle("Number of Steps per Interval (weekend/weekend") +
facet_grid(daytype ~ .)
install.packages("RMySQL")
data_steps <- ddply(data_NA, .(interval, daytype), summarise, steps = mean(steps, na.rm = TRUE))
ggplot(data_steps, aes(x = interval, y = steps)) +
geom_line(col='blue') +
ylab('Number of steps') + xlab("Interval") +
ggtitle("Number of Steps per Interval (weekend/weekend") +
facet_grid(daytype ~ .)
# Plot the time series plot (facet) of 5 - minute interval and the average number of steps taken on weekdays and weekends
ggplot(day.interval.Steps, aes(x = interval, y = steps)) +
geom_line(col='blue') +
ylab('Number of steps') + xlab("Interval") +
ggtitle("Number of Steps per Interval (weekend/weekend") +
facet_grid(daytype ~ .)
# add the weekday to the dataset
data$weekday <- weekdays(data$date)
# create a copy of data set with NA rows
data.WithNA <- data
# remove all rows with 'NA'
data.NoNA <- data[complete.cases(data),]
# Calculate total number of steps per day
sum.steps.day <- ddply(data.NoNA, .(date), summarise, steps = sum(steps))
plot(sum.steps.day$date, sum.steps.day$steps, type = "h", main = "Histogram of daily steps", xlab = "Date", ylab = "Steps per day", col = "blue", lwd = 8)
abline(h = mean(sum.steps.day$steps), col = "red", lwd = 2)
# Mean steps per Day
paste("Mean steps per Day =", round(mean(sum.steps.day$steps), 0))
# Median steps per Day
paste("Median steps per Day =", round(median(sum.steps.day$steps), 0))
# Calculate total number of steps per day interval
mean.steps.interval <- ddply(data.WithNA, .(interval), summarise, steps = mean(steps, na.rm = TRUE))
plot(mean.steps.interval$interval, mean.steps.interval$steps, type = "l", main = "Average daily activity by interval", xlab = "Interval",
ylab = "Steps per interval", col = "blue", lwd = 2)
abline(h = mean(mean.steps.interval$steps, na.rm = TRUE), col = "red", lwd = 2)
# Maximum number of steps 5-minute interval
paste("Maximum number of steps in interval =", mean.steps.interval$interval[which.max(mean.steps.interval$steps)])
paste("Maximum number of steps =", round(max(mean.steps.interval$steps), 0))
# Calculate number of rows in data set with NA rows
sum(is.na(data.WithNA$steps))
# Calculate the mean value per day and interval. This gives a good average of steps for a given day
mean.weekday <- ddply(data.WithNA, .(interval, weekday), summarise, steps = round(mean(steps, na.rm = TRUE), 2))
# Get list of indices where steps value = NA
naIndex = which(is.na(data.WithNA$steps))
# Merge dataset 'data.WithNA' with dataset mean.steps.interval
merged.NA = merge(data.WithNA, mean.steps.interval, by = "interval", suffixes = c(".actual", ".stepsInt"))
# give the dataset a more precise name
data.Complete <- data.WithNA
# Replace NA values with value from steps
data.Complete[naIndex, "steps"] <- merged.NA[naIndex, 'steps.stepsInt']
# verify if dataset contains NA values
paste("Missing values in new dataset = ", sum(is.na(data.Complete)))
# Calculate total number of steps per day
steps.day <- ddply(data.Complete, .(date), summarise, steps = round(sum(steps, na.rm = TRUE), 0))
plot(steps.day$date, steps.day$steps, type = "h", main = "Histogram of daily steps (added NA Values)", xlab = "Date", ylab = "Steps per day", col = "blue", lwd = 8)
abline(h = mean(steps.day$steps, na.rm = TRUE), col = "red", lwd = 2)
# Calculate total number of steps per day
sum.steps.day <- ddply(data.Complete, .(date), summarise, steps = sum(steps))
# Mean steps per Day
paste("Mean steps per Day =", round(mean(sum.steps.day$steps), 0))
# Median steps per Day
paste("Median steps per Day =", round(median(sum.steps.day$steps), 0))
# Evaluate wether date is weekday or weekend
data.Complete$daytype <- lapply(data.Complete$date, function(x) ifelse(isWeekday(x, wday = 1:5), 'weekday', 'weekend'))
# flatten list to vector
data.Complete$daytype <- unlist(data.Complete$daytype, use.names = TRUE)
# Create Factor variable
data.Complete$daytype <- as.factor(data.Complete$daytype)
# Calculate the 5 - minute interval and the average number of steps taken on weekdays and weekends
day.interval.Steps <- ddply(data.Complete, .(interval, daytype), summarise, steps = mean(steps, na.rm = TRUE))
# Plot the time series plot (facet) of 5 - minute interval and the average number of steps taken on weekdays and weekends
ggplot(day.interval.Steps, aes(x = interval, y = steps)) +
geom_line(col='blue') +
ylab('Number of steps') + xlab("Interval") +
ggtitle("Number of Steps per Interval (weekend/weekend") +
facet_grid(daytype ~ .)
ggplot(day.interval.Steps, aes(x = interval, y = steps)) +
geom_line(col='blue') +
ylab('Number of steps') + xlab("Interval") +
ggtitle("Number of Steps per Interval (weekend/weekend") +
facet_grid(daytype ~ .)
# ==========================================================================================================
# Load Libraries
# ==========================================================================================================
library('reshape2')
library('plyr')
library('timeDate')
library('ggplot2')
# ==========================================================================================================
# Download and extract Data and load file
# ==========================================================================================================
zipFile <- "repdata-data-activity.zip"
if (!file.exists("Data/activity.csv")) {
dataURL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(dataURL, zipFile, mode = "wb")
unzip(zipFile, files = NULL, list = FALSE, overwrite = TRUE, junkpaths = FALSE, exdir = "Data",
unzip = "internal", setTimes = FALSE)
file.remove(zipFile)
}
# Define Directory where File is located
dirName <- 'Data'
# load power consumption data
fileName = "activity.csv"
fileNameActivity <- file.path(dirName, fileName)
data <- read.csv(file = fileNameActivity, header = TRUE, colClasses = c("numeric", "Date", "numeric"))
head(data)
# ==========================================================================================================
# Data preprocessing for analysis
# ==========================================================================================================
# add the weekday to the dataset
data$weekday <- weekdays(data$date)
# create a copy of data set with NA rows
data.WithNA <- data
# remove all rows with 'NA'
data.NoNA <- data[complete.cases(data),]
head(data.WithNA)
# Calculate total number of steps per day
sum.steps.day <- ddply(data.NoNA, .(date), summarise, steps = sum(steps, na.rm = TRUE))
head(sum.steps.day)
plot(sum.steps.day$date, sum.steps.day$steps, type = "h", main = "Histogram of daily steps", xlab = "Date", ylab = "Steps per day", col = "blue", lwd = 6)
abline(h = mean(sum.steps.day$steps, na.rm = TRUE), col = "red", lwd = 2)
# Mean steps per Day (rounded)
paste("Mean steps per Day =", round(mean(sum.steps.day$steps, na.rm = TRUE), 0))
# Median steps per Day (rounded)
paste("Median steps per Day =", round(median(sum.steps.day$steps, na.rm = TRUE), 0))
# Calculate total number of steps per year and interval
mean.steps.interval <- ddply(data.WithNA, .(interval), summarise, steps = mean(steps, na.rm = TRUE))
head(mean.steps.interval)
plot(mean.steps.interval$interval, mean.steps.interval$steps, type = "l", main = "Average daily activity by interval", xlab = "Interval",
ylab = "Steps per interval", col = "blue", lwd = 1)
abline(h = mean(mean.steps.interval$steps, na.rm = TRUE), col = "red", lwd = 2)
# Maximum number of steps 5-minute interval
paste("Maximum number of steps in interval =", mean.steps.interval$interval[which.max(mean.steps.interval$steps)])
# Calculate number of rows in data.WithNA data set with NA rows
sum(is.na(data.WithNA$steps))
# Calculate the mean value per day and interval. This gives a good average of steps for a given day
mean.weekday <- ddply(data.WithNA, .(interval, weekday), summarise, steps = round(mean(steps, na.rm = TRUE), 2))
# Get list of indices where steps value = NA
naIndex = which(is.na(data.WithNA$steps))
# Merge dataset 'data.WithNA' with dataset mean.steps.interval
merged.NA = merge(data.WithNA, mean.steps.interval, by = "interval", suffixes = c(".actual", ".stepsInt"))
# give the dataset a more precise name
data.Complete <- data.WithNA
# Replace NA values with value from steps
data.Complete[naIndex, "steps"] <- merged.NA[naIndex, 'steps.stepsInt']
# verify if dataset contains NA values
paste("Missing values in new dataset =", sum(is.na(data.Complete)))
# Calculate total number of steps per day
steps.day <- ddply(data.Complete, .(date), summarise, steps = round(sum(steps, na.rm = TRUE),0))
head(steps.day)
plot(steps.day$date, steps.day$steps, type = "h", main = "Histogram of daily steps (added NA Values)", xlab = "Date", ylab = "Steps per day", col = "blue", lwd = 6)
abline(h = mean(steps.day$steps, na.rm = TRUE), col = "red", lwd = 2)
# Calculate total number of steps per day
sum.steps.day <- ddply(data.Complete, .(date), summarise, steps = sum(steps))
# Mean steps per Day
paste("Mean steps per Day =", round(mean(sum.steps.day$steps), 0))
# Median steps per Day
paste("Median steps per Day =", round(median(sum.steps.day$steps), 0))
# Evaluate wether date is weekday or weekend
data.Complete$daytype <- lapply(data.Complete$date, function(x) ifelse(isWeekday(x, wday = 1:5), 'weekday', 'weekend'))
# flatten list to vector
data.Complete$daytype <- unlist(data.Complete$daytype, use.names = TRUE)
# Create Factor variable
data.Complete$daytype <- as.factor(data.Complete$daytype)
str(data.Complete)
head(data.Complete)
# Calculate the 5 - minute interval and the average number of steps taken on weekdays and weekends
day.interval.Steps <- ddply(data.Complete, .(interval, daytype), summarise, steps = mean(steps, na.rm = TRUE))
# Plot the time series plot (facet) of 5 - minute interval and the average number of steps taken on weekdays and weekends
ggplot(day.interval.Steps, aes(x = interval, y = steps)) +
geom_line(col='blue') +
ylab('Number of steps') + xlab("Interval") +
ggtitle("Number of Steps per Interval (weekend/weekend") +
facet_grid(daytype ~ .)
